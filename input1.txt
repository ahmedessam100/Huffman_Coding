In the preceding chapters, our programs have been written to access objects directly, i.e. using  the variable names. We have postponed until now a discussion of the concept of indirect access , i.e. access of objects using their address. As we have seen, variables local to a function may be accessed using their name only within that function. When arguments are passed to another function, only the values are passed, and the called function may use these values, but cannot affect the variable cells in the calling function. Sometimes, however, a function needs to have direct access to the cells in another function. This can be done in C through indirect access, using the address of the cell, called a pointer . In this chapter, we will introduce the concepts of indirect access, pointer types, and dereferenced pointer variables. We will use these concepts to write functions that indirectly access objects in a calling function. 6.1 What is a Pointer? Frequently, a called function needs to make changes to objects declared in the calling function. For example, the function, scanf() , needs to access objects in the calling function to store the data read and converted into an object designed there. Therefore, we supply scanf() with the address of objects rather than their values. Here, we will see how any function can indirectly access an object by its address. Another common use of pointers is to write functions that return more than one value. As we have seen, every function in C returns a value as the value of the function however, if a functions meaning includes the return of several pieces of information, this single return value is not su cient. In these cases, we can have the function return multiple data values indirectly, using pointers. What if we had wanted to print the value of the cell pointed to by iptr and not the value of itself? The indirection operator , * , accesses the object pointed to by its operand. In our example, the value of iptr is 1000 which is an address of some object i.e. iptr points to some object located at address 1000. However, there is no way to know how many bytes to access at address 1000, nor how to interpret the data, unless the type of object at address 1000 is known: is it an int ? a float ? a char ? etc. In order for the compiler to know how to access an object indirectly, it must know the type of that object. We specify the type of object to access by indicating to the compiler the type of objects a pointer refers to when we declare the pointer. So, in our example, we should declare the variable, iptr as a pointer to an integer as follows:
